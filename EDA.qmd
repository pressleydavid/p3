library(tidyverse)
library(janitor)
library(corrplot)Y
library(patchwork)
library(svglite)

# Introduction
The Behavioral Risk Factor Surveillance System (BRFSS) is a health-related telephone survey that is collected annually by the CDC. Each year, the survey collects responses from over 400,000 Americans on health-related risk behaviors, chronic health conditions, and the use of preventative services. It has been conducted every year since 1984. For this project, a csv of the dataset available on Kaggle for the year 2015 was used. This original dataset contains responses from 441,455 individuals and has 330 features. These features are either questions directly asked of participants, or calculated variables based on individual participant responses. 

This dataset contains 3 files:

### Clean up if not using 1 and 2
1. diabetes _ 012 _ health _ indicators _ BRFSS2015.csv is a clean dataset of 253,680 survey responses to the CDC's BRFSS2015. The target variable Diabetes_012 has 3 classes. 0 is for no diabetes or only during pregnancy, 1 is for prediabetes, and 2 is for diabetes. There is class imbalance in this dataset. This dataset has 21 feature variables

2. diabetes _ binary _ 5050split _ health _ indicators _ BRFSS2015.csv is a clean dataset of 70,692 survey responses to the CDC's BRFSS2015. It has an equal 50-50 split of respondents with no diabetes and with either prediabetes or diabetes. The target variable Diabetes_binary has 2 classes. 0 is for no diabetes, and 1 is for prediabetes or diabetes. This dataset has 21 feature variables and is balanced.

3. --> diabetes _ binary _ health _ indicators _ BRFSS2015.csv is a clean dataset of 253,680 survey responses to the CDC's BRFSS2015. The target variable Diabetes_binary has 2 classes. 0 is for no diabetes, and 1 is for prediabetes or diabetes. This dataset has 21 feature variables and is not balanced.

(Source: https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset/data)
# Import Data

```{r Import Data, include=FALSE}
# Setup factor levels to apply using a list
raw <- read_csv("diabetes_binary_health_indicators_BRFSS2015.csv")

diabeetus <- read_csv("diabetes_binary_health_indicators_BRFSS2015.csv", show_col_types = FALSE) |>
  mutate(Diabetes_binary = structure(
          fct_recode(as.character(Diabetes_binary), 
                      "No Diabetes" = "0",
                      "Diabetes" = "1"),
                      label = "Diabetes or Prediabetes"),
        HighBP = structure(
          fct_recode(as.character(HighBP),
                      "no" = "0",
                      "yes" = "1"),
                      label = "High Blood Pressure"),
        HighChol = structure(
          fct_recode(as.character(HighChol),
                      "no" = "0",
                      "yes" = "1"),
                      label = "High Cholesterol"),
        CholCheck = structure(
          fct_recode(as.character(CholCheck),
                     "no" = "0",
                     "yes" = "1"),
                      label = "Cholesterol Check Status", 
                      long_label = "Cholesterol Check within Past 5 years"),
        BMI = structure(
          as.integer(BMI),
          label = "BMI"),
        Smoker = structure(
          fct_recode(as.character(Smoker),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Smoking Status",
                      long_label = "Have you smoked at least 100 cigarettes in your entire life? [Note: 5 packs = 100 cigarettes]"),
        Stroke = structure(
          fct_recode(as.character(Stroke),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Stroke Status",
                      long_label = "(Ever told) you had a stroke"),
        HeartDiseaseorAttack = structure(
          fct_recode(as.character(HeartDiseaseorAttack),
                      "no" = "0",
                      "yes" = "1"),
                      label = "CHD/MI Status",
                      long_label = "Coronary Heart Disease (CHD) or Myocardial Infarction (MI)"),
        PhysActivity = structure(
          fct_recode(as.character(PhysActivity),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Physical Activity Status",
                      long_label = "Physical Activity in past 30 days - not including job"),
        Fruits = structure(
          fct_recode(as.character(Fruits),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Fruit Consumption",
                      long_label = "Consume Fruit 1 or more times per day"),
        Veggies = structure(
          fct_recode(as.character(Veggies),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Vegetable Consumption",
                      long_label = "Consume Vegetables 1 or more times per day"),
        HvyAlcoholConsump = structure(
          fct_recode(as.character(HvyAlcoholConsump),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Heavy Drinker",
                      long_label = "Heavy drinkers (adult men having more than 14 drinks per week and adult women having more than 7 drinks per week"),
        AnyHealthcare = structure(
          fct_recode(as.character(AnyHealthcare),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Healthcare Coverage",
                      long_label = "Have any kind of health care coverage, including health insurance, prepaid plans such as HMO, etc"),
        NoDocbcCost = structure(
          fct_recode(as.character(NoDocbcCost),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Healthcare Cost Unaffordable",
                      long_label = "Was there a time in the past 12 months when you needed to see a doctor but could not because of cost?"),
        GenHlth = structure(
          fct_recode(as.character(GenHlth),
                      "excellent" = "1",
                      "very good" = "2",
                      "good" = "3",
                      "fair" = "4",
                      "poor" = "5"),
                      label = "Overall Health",
                      long_label = "Overall Health (scale 1(excellent)-5(Poor)"),
        MentHlth = structure(
          as.integer(MentHlth),
            label = "Poor Mental Health Days",
            long_label = "how many days during the past 30 days was your mental health not good?"),
        PhysHlth = structure(
          as.integer(PhysHlth),
            label = "Poor Physical Health Days",
            long_label = "how many days during the past 30 days was your physical health not good?"),
        DiffWalk = structure(
          fct_recode(as.character(DiffWalk),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Difficulty Walking Status",
                      long_label = "Do you have serious difficulty walking or climbing stairs?"),
        Sex = structure(
          fct_recode(as.character(Sex),
                      "female" = "0",
                      "male" = "1"),
                      label = "Sex",
                      long_label = "Sex"),
        Education = structure(
          fct_recode(as.character(Education),
                      "None" = "1" ,
                      "Elementary(Grades 1-8)" = "2",
                      "Some HS (Grades 9-11)" = "3",
                      "HS Grad" = "4",
                      "Some college (1-3 years)" = "5",
                      "College graduate" = "6"),
                      label = "Education Level",
                      long_label = "Education level (EDUCA codebook scale)"),
        Age = structure(
          fct_recode(as.character(Age),
                      "18-24" = "1",
                      "25-29" = "2",
                      "30-34" = "3",
                      "35-39" = "4",
                      "40-44" = "5",
                      "45-49" = "6",
                      "50-54" = "7",
                      "55-59" = "8",
                      "60-64" = "9",
                      "65-69" = "10", 
                      "70-74" = "11", 
                      "75-79" = "12",
                      ">80" = "13"),
                      label = "Age Category (5 year)",
                      long_label = "13-level age category (_AGEG5YR see codebook)"),
        Income = structure(
          fct_recode(as.character(Income),
                      "<10k" = "1",
                      "10k-15k" = "2",
                      "15k-20k" = "3",
                      "20k-25k" = "4",
                      "25k-35k" = "5",
                      "35k-50k" = "6",
                      "50k-75k" = "7",
                      ">75k" = "8"),
                      label = "Income Level",
                      long_label = "Income scale (INCOME2 see codebook)")
         )
```
  
# EDA
## Purpose: The purpose of this EDA is to create meaningful summary statistics and plots with `Diabetes_binary` as the 
##            primary response variable. Various summaries describing data structures, summaries, accounting of missing
##            values, distributions of data, contingency tables, plots, correlations, etc will be created so that we can
##            form the basis for the elucidation and analysis of meaningful patterns in the dataset capable of predicting 
##            the onset of diabetes via the `Diabetes_binary` variable

### Data Inspection
```{r}
# Structure of imported and transformed data
glimpse(diabeetus)
str(diabeetus)

# Basic summaries
psych::describe(diabeetus)
knitr::kable(summary(diabeetus))

# Missing values
colSums(is.na(diabeetus))
## No missing values

# Create a summary table for missing
missing_summ <- diabeetus |>
  summarize(across(everything(), \(x) sum(is.na(x)))) |>
  pivot_longer(everything(),
                names_to = "Variable",
                values_to = "Missing Count")
missing_summ

```

### Prevalence of Diabetes
```{r}
db_summary <- diabeetus |>
  count(Diabetes_binary) |>
  mutate(percentage = n/sum(n)*100)
db_summary

ggplot(diabeetus, aes(x = Diabetes_binary))
       + geom_bar()
```

### Bar Plots for categorical variables
```{r}
#Relevel Age
diabeetus$Age <- fct_relevel(diabeetus$Age, 
                             "18-24", "25-29", "30-34", "35-39", "40-44", 
                             "45-49", "50-54", "55-59", "60-64", "65-69", 
                             "70-74", "75-79", ">80")

# Table for Diabetes_binary
# barplot(table(diabeetus$Diabetes_binary))

categorical_vars <- names(diabeetus)[sapply(diabeetus,is.factor)]
x <- 1
plot_list <- list()
for (i in categorical_vars){
  plot_data <- diabeetus |>
    count(!!sym(i)) |>
    mutate(percentage = n / sum(n) *100)
  
  plot_list[[x]] <- ggplot(plot_data, aes_string(x = i, y = "n")) + 
    geom_bar(stat = "identity", fill = "lightgrey") +
    geom_text(aes(label = paste0(round(percentage, 1), "%")), size = 3, vjust = 1) +
    labs(title = attr(diabeetus[[i]], "label") %||% i,
         y = "Count",
         x = NULL) +
    theme_minimal() +
    theme(
      plot.title = element_text(size = 11, face = "bold"),
      axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
      axis.text.y = element_text(size = 8),
      plot.margin = margin(5, 5, 5, 5)
    )
    scale_x_discrete(guide = guide_axis(angle = 45))
  x <- x + 1
}
combined_plots <- wrap_plots(plot_list, ncol = 3)


```

```{r}
#| fig.width: 15
#| fig.height: 20
#| out.width: "100%"
#| fig.path: "figures/"

ggsave("categorical_distributions.svg",
       combined_plots,
       width = 15,
       height = 20,
       device = "svg"
       )

combined_plots
```


### Covariance and Correlation Tables
### Contingency Tables
#### Summary Stats for Categorical variables


#### Contingency tables to show the distribution of diabetes
```{r}
ggplot(diabeetus, aes(x =  Diabetes_binary )) + geom_bar()
ggplot(diabeetus, aes(x =  Smoker )) + geom_bar()
ggplot(diabeetus, aes(x =  HighBP )) + geom_bar()
ggplot(diabeetus, aes(x =  HighChol )) + geom_bar()
```

#### Creating Contingency tables for interesting variables
### Histograms of numeric variables
#### Visualizing the distribution of numeric variables in the data
```{r}
ggplot(diabeetus, aes(x = BMI )) + geom_histogram()
ggplot(diabeetus, aes(x = MentHlth )) + geom_histogram(binwidth = 5) + labs(x = "Days of Poor Mental Health in Last Month",y = "Number of People")
ggplot(diabeetus, aes(x = PhysHlth )) + geom_histogram(binwidth = 5) + labs(x = "Days of Poor Physical Health in Last Month",y = "Number of People")
```

### Based on the skewness of the distribution, how many people had poor mental and physical health between 20 and 30 days of the month
```{r}
#### Summary Table
diabeetus |>
  mutate(mh_grp = factor(diabeetus$MentHlth >= 29,
                                 levels = c(FALSE,TRUE),
                                 labels = c("Less than 29 days", "29 or more days"))) |>
  tabyl(mh_grp) |>
  adorn_pct_formatting()

ggplot(diabeetus, aes(x = factor(MentHlth >= 29,
                                 levels = c(FALSE,TRUE),
                                 labels = c("Less than 29 days", "29 or more days")))) +
  geom_bar() +
  labs(x = "Days of Poor Mental Health",
       y = "Count",
       title = "Distribution of Mental Health Days") +
  theme_minimal()
```

```{r}
diabeetus |>
  mutate(ph_grp = factor(PhysHlth >= 29,
                                 levels = c(FALSE,TRUE),
                                 labels = c("Less than 29 days", "29 or more days")),
                            ) |>
  tabyl(ph_grp) |>
  adorn_pct_formatting() |>
  rename("Days of Poor Physical Health" = ph_grp)

ggplot(diabeetus, aes(x = factor(PhysHlth >= 29,
                                 levels = c(FALSE,TRUE),
                                 labels = c("Less than 29 days", "29 or more days")))) +
  geom_bar() +
  labs(x = "Days of Poor Physical Health",
       y = "Count",
       title = "Distribution of Physical Health Days") +
  theme_minimal()
```




### Correlation Plot
#### Purpose: Determine correlations between the predictor variable and other factors

```{r}
cor_matrix <- daily_summ |>
  select(total_bikes, avg_temp, avg_humidity, avg_wind_speed,
         avg_visibility, avg_solar_rad, total_rainfall, total_snowfall) |>
  cor(use = "complete.obs")
cor_matrix
# Create correlation plot
corrplot(cor_matrix,
         method = "color",
         type = "upper",
         addCoef.col = "black",
         tl.col = "black",
         tl.srt = 45,
         diag = FALSE)
```

