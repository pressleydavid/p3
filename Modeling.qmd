```{r, echo=FALSE}
library(tidyverse)
library(tidymodels)
library(tree)
```
### Purpose: Select the best model for predicting Diabetes
Choose form of model
Fit model to data using some algorithm
Usually can be written as a problem where we minimize some loss function
Evaluate the model using a metric
RMSE very common for a numeric response
Ideally we want our model to predict well for observations it has yet to see!

A classification tree is a decision tree model used for categorical outcomes (like predicting yes/no). It recursively splits the data into groups based on predictor variables, aiming to create regions with similar response values. At each leaf node, it predicts the most common class in that region.

### Why 5-K CV?
### From ESLII: ch7: if the learning curve has a considerable slope at the given
training set size, five- or tenfold cross-validation will overestimate the true prediction error. Whether this bias is a drawback in practice depends on the objective. On the other hand, leave-one-out cross-validation has low bias but can have high variance. Overall, five- or tenfold cross-validation are recommended as a good compromise: see Breiman and Spector (1992) and Kohavi (1995). Figure 7.9 shows the prediction error and tenfold cross-validation curve

### Read in CSV and map factor levels
```{r}
diabeetus <- read_csv("diabetes_binary_health_indicators_BRFSS2015.csv", show_col_types = FALSE) |>
  mutate(Diabetes_binary = structure(
          fct_recode(as.character(Diabetes_binary), 
                      "No Diabetes" = "0",
                      "Diabetes" = "1"),
                      label = "Diabetes or Prediabetes"),
        HighBP = structure(
          fct_recode(as.character(HighBP),
                      "no" = "0",
                      "yes" = "1"),
                      label = "High Blood Pressure"),
        HighChol = structure(
          fct_recode(as.character(HighChol),
                      "no" = "0",
                      "yes" = "1"),
                      label = "High Cholesterol"),
        CholCheck = structure(
          fct_recode(as.character(CholCheck),
                     "no" = "0",
                     "yes" = "1"),
                      label = "Cholesterol Check Status", 
                      long_label = "Cholesterol Check within Past 5 years"),
        BMI = structure(
          as.integer(BMI),
          label = "BMI"),
        Smoker = structure(
          fct_recode(as.character(Smoker),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Smoking Status",
                      long_label = "Have you smoked at least 100 cigarettes in your entire life? [Note: 5 packs = 100 cigarettes]"),
        Stroke = structure(
          fct_recode(as.character(Stroke),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Stroke Status",
                      long_label = "(Ever told) you had a stroke"),
        HeartDiseaseorAttack = structure(
          fct_recode(as.character(HeartDiseaseorAttack),
                      "no" = "0",
                      "yes" = "1"),
                      label = "CHD/MI Status",
                      long_label = "Coronary Heart Disease (CHD) or Myocardial Infarction (MI)"),
        PhysActivity = structure(
          fct_recode(as.character(PhysActivity),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Physical Activity Status",
                      long_label = "Physical Activity in past 30 days - not including job"),
        Fruits = structure(
          fct_recode(as.character(Fruits),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Fruit Consumption",
                      long_label = "Consume Fruit 1 or more times per day"),
        Veggies = structure(
          fct_recode(as.character(Veggies),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Vegetable Consumption",
                      long_label = "Consume Vegetables 1 or more times per day"),
        HvyAlcoholConsump = structure(
          fct_recode(as.character(HvyAlcoholConsump),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Heavy Drinker",
                      long_label = "Heavy drinkers (adult men having more than 14 drinks per week and adult women having more than 7 drinks per week"),
        AnyHealthcare = structure(
          fct_recode(as.character(AnyHealthcare),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Healthcare Coverage",
                      long_label = "Have any kind of health care coverage, including health insurance, prepaid plans such as HMO, etc"),
        NoDocbcCost = structure(
          fct_recode(as.character(NoDocbcCost),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Healthcare Cost Unaffordable",
                      long_label = "Was there a time in the past 12 months when you needed to see a doctor but could not because of cost?"),
        GenHlth = structure(
          fct_recode(as.character(GenHlth),
                      "excellent" = "1",
                      "very good" = "2",
                      "good" = "3",
                      "fair" = "4",
                      "poor" = "5"),
                      label = "Overall Health",
                      long_label = "Overall Health (scale 1(excellent)-5(Poor)"),
        MentHlth = structure(
          as.integer(MentHlth),
            label = "Poor Mental Health Days",
            long_label = "how many days during the past 30 days was your mental health not good?"),
        PhysHlth = structure(
          as.integer(PhysHlth),
            label = "Poor Physical Health Days",
            long_label = "how many days during the past 30 days was your physical health not good?"),
        DiffWalk = structure(
          fct_recode(as.character(DiffWalk),
                      "no" = "0",
                      "yes" = "1"),
                      label = "Difficulty Walking Status",
                      long_label = "Do you have serious difficulty walking or climbing stairs?"),
        Sex = structure(
          fct_recode(as.character(Sex),
                      "female" = "0",
                      "male" = "1"),
                      label = "Sex",
                      long_label = "Sex"),
        Education = structure(
          fct_recode(as.character(Education),
                      "None" = "1" ,
                      "Elementary(Grades 1-8)" = "2",
                      "Some HS (Grades 9-11)" = "3",
                      "HS Grad" = "4",
                      "Some college (1-3 years)" = "5",
                      "College graduate" = "6"),
                      label = "Education Level",
                      long_label = "Education level (EDUCA codebook scale)"),
        Age = structure(
          fct_recode(as.character(Age),
                      "18-24" = "1",
                      "25-29" = "2",
                      "30-34" = "3",
                      "35-39" = "4",
                      "40-44" = "5",
                      "45-49" = "6",
                      "50-54" = "7",
                      "55-59" = "8",
                      "60-64" = "9",
                      "65-69" = "10", 
                      "70-74" = "11", 
                      "75-79" = "12",
                      ">80" = "13"),
                      label = "Age Category (5 year)",
                      long_label = "13-level age category (_AGEG5YR see codebook)"),
        Income = structure(
          fct_recode(as.character(Income),
                      "<10k" = "1",
                      "10k-15k" = "2",
                      "15k-20k" = "3",
                      "20k-25k" = "4",
                      "25k-35k" = "5",
                      "35k-50k" = "6",
                      "50k-75k" = "7",
                      ">75k" = "8"),
                      label = "Income Level",
                      long_label = "Income scale (INCOME2 see codebook)")
         )
```



### For categorical responses, we use log-loss (see notes for more detail)
### Tidymodels Implementation of a 5XCV
### Split into training and test
```{r}
set.seed(462)
split <- initial_split(diabeetus, prop = 0.7)
train <- training(split)
test <- testing(split)

# Create 5XCV splits of train
diabeetus_folds <- vfold_cv(train, v = 5)

# Create recipe with 5+ predictors, based on EDA selection
# 1. HighBP
# 2. HighChol
# 3. DiffWalk
# 4. HeartDiseaseorAttack
# 5. Smoker
# 6. Stroke

# 6 Predictors
tree_rec1 <- recipe(Diabetes_binary ~ HighBP + HighChol + BMI +
                 Age + GenHlth + PhysActivity, data = train) |>
  step_dummy(HighBP, HighChol, Age, GenHlth, PhysActivity) |>
  step_normalize(BMI)

# Create the decision tree model
tree_model <- decision_tree(
  cost_complexity = tune(),
  tree_depth = 10,
  min_n = 30
) |>
  set_engine("rpart") |>
  set_mode("classification")

# Create workflow
tree_wkf <- workflow() |>
  add_recipe(tree_rec1) |>
  add_model(tree_model)

# Use CV to select tuning parameters
tuner <- tree_wkf |>
  tune_grid(resamples = diabeetus_folds)

tuner |> collect_metrics()
```




### Hand-rolling a 5-Fold CV
```{r}
nrow(diabeetus)
size_fold <- floor(nrow(diabeetus)/5)

#Reorder indices
set.seed(462)
random_indices <- sample(1:nrow(diabeetus), size = nrow(diabeetus), replace = FALSE)



# iterate through the indices vector and add appropriate observations to each data set
get_cv_splits <- function(data, num_folds){
  #get fold size
  size_fold <- floor(nrow(data)/num_folds)
  #get random indices to subset the data with
  random_indices <- sample(1:nrow(data), size = nrow(data), replace = FALSE)
  #create a list to save our folds in
  folds <- list()
  #now cycle through our random indices vector and take the appropriate observations to each fold
  for(i in 1:num_folds){
    if (i < num_folds) {
      fold_index <- seq(from = (i-1)*size_fold +1, to = i*size_fold, by = 1)
      folds[[i]] <- data[random_indices[fold_index], ]
    } else {
      fold_index <- seq(from = (i-1)*size_fold +1, to = length(random_indices), by = 1)
      folds[[i]] <- data[random_indices[fold_index], ]
    }
  }
  return(folds)
}
folds <- get_cv_splits(diabeetus, 5)
# folds[[1]]

#Fit data on 4 folds, test on 5th
#set test fold number
test_number <- 5
#pull out testing fold & remove from list
test <- folds[[test_number]]
folds[[test_number]] <- NULL
#check length == 4
length(folds)
# Combind tibbles saved in different folds
train <- purrr::reduce(folds, rbind)

#Fit model and check metric on test set
fit <- lm()


#Return list with folds of data

```


### Fit a Classification Tree Model
```{r}
attach(diabeetus)
classification_tree <- tree(Diabetes_binary ~ ., data = diabeetus)
summary(classification_tree)
plot(classification_tree)
text(classification_tree, pretty = 0)
```

### From Lesson (Regression & Classification Trees pdf)
```{r}
fitTree <- tree(Diabetes_binary ~ HighBP, data = diabeetus)
plot(fitTree)
text(fitTree, pretty = 0)
```



[Click here for the Modeling Page](Modeling.html)
